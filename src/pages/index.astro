---
import DashboardLayout from '../layouts/DashboardLayout.astro';
import StatsCard from '../components/StatsCard.astro';
import LineChart from '../components/LineChart.astro';
import EnhancedDeploymentTable from '../components/EnhancedDeploymentTable.astro';
import AlertCard from '../components/AlertCard.astro';
import ResourceTimeline from '../components/ResourceTimeline.astro';
import NotificationCenter from '../components/NotificationCenter.astro';
import ToggleSwitch from '../components/ToggleSwitch.astro';
import DarkModeToggle from '../components/DarkModeToggle.astro';
import "../styles/globals.css";
---

<DashboardLayout>
  <!-- Enhanced Mobile-First Header -->
  <div class="flex flex-col space-y-4 mb-6 lg:mb-8">
    <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
      <div class="flex-1">
        <h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold bg-gradient-to-r from-emerald-600 via-teal-600 to-emerald-800 bg-clip-text text-transparent mb-2">
          DevOps Command Center
        </h1>
        <p class="text-gray-600 dark:text-gray-400 text-base sm:text-lg">Real-time monitoring and deployment management</p>
        <div class="flex flex-wrap items-center mt-3 space-x-4 space-y-2 sm:space-y-0">
          <div class="flex items-center space-x-2">
            <div class="w-3 h-3 bg-gradient-to-r from-emerald-400 to-teal-500 rounded-full animate-pulse shadow-lg"></div>
            <span class="text-sm text-gray-500 dark:text-gray-400">Systems Online</span>
          </div>
          <div class="flex items-center space-x-2">
            <div class="w-3 h-3 bg-gradient-to-r from-blue-400 to-emerald-500 rounded-full animate-pulse shadow-lg"></div>
            <span id="last-update" class="text-sm text-gray-500 dark:text-gray-400">Last updated: Now</span>
          </div>
        </div>
      </div>
      
      <div class="flex flex-wrap items-center gap-3 sm:gap-4">
        <!-- Notification Center -->
        <NotificationCenter />
        
        <!-- Quick Actions Dropdown -->
        <div class="relative" id="quick-actions-dropdown">
          <button 
            id="quick-actions-btn"
            class="inline-flex items-center px-3 py-2 sm:px-4 border border-emerald-300 dark:border-emerald-600 rounded-lg text-sm font-medium text-emerald-700 dark:text-emerald-200 bg-gradient-to-r from-emerald-50 to-teal-50 dark:from-emerald-900/20 dark:to-teal-900/20 hover:from-emerald-100 hover:to-teal-100 dark:hover:from-emerald-800/30 dark:hover:to-teal-800/30 focus:outline-none focus:ring-2 focus:ring-emerald-500 transition-all duration-200 shadow-md hover:shadow-lg"
          >
            <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
            <span class="hidden sm:inline">Quick Deploy</span>
            <span class="sm:hidden">Deploy</span>
            <svg class="w-3 h-3 sm:w-4 sm:h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>
          
          <!-- Dropdown Menu -->
          <div 
            id="quick-actions-menu" 
            class="hidden absolute right-0 mt-2 w-48 sm:w-56 rounded-lg shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 z-50 transform scale-95 opacity-0 transition-all duration-200 origin-top-right"
          >
            <div class="py-2">
              <button class="flex items-center w-full px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gradient-to-r hover:from-emerald-50 hover:to-teal-50 dark:hover:from-emerald-900/20 dark:hover:to-teal-900/20 transition-colors duration-200">
                <svg class="w-4 h-4 mr-3 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"></path>
                </svg>
                Deploy to Staging
              </button>
              <button class="flex items-center w-full px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gradient-to-r hover:from-emerald-50 hover:to-teal-50 dark:hover:from-emerald-900/20 dark:hover:to-teal-900/20 transition-colors duration-200">
                <svg class="w-4 h-4 mr-3 text-teal-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                Deploy to Production
              </button>
              <button class="flex items-center w-full px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gradient-to-r hover:from-emerald-50 hover:to-teal-50 dark:hover:from-emerald-900/20 dark:hover:to-teal-900/20 transition-colors duration-200">
                <svg class="w-4 h-4 mr-3 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Rollback Last Deploy
              </button>
              <div class="border-t border-gray-100 dark:border-gray-700 my-2"></div>
              <button class="flex items-center w-full px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gradient-to-r hover:from-emerald-50 hover:to-teal-50 dark:hover:from-emerald-900/20 dark:hover:to-teal-900/20 transition-colors duration-200">
                <svg class="w-4 h-4 mr-3 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
                Run Health Check
              </button>
            </div>
          </div>
        </div>
        
        <!-- Settings Button -->
        <button class="p-2 text-gray-400 hover:text-emerald-600 dark:hover:text-emerald-400 focus:outline-none focus:text-emerald-600 transition-colors duration-200 rounded-lg hover:bg-gradient-to-r hover:from-emerald-50 hover:to-teal-50 dark:hover:from-emerald-900/20 dark:hover:to-teal-900/20">
          <svg class="w-5 h-5 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Interactive Demo Section - Mobile Responsive -->
    <div class="bg-gradient-to-br from-emerald-500 via-teal-500 to-emerald-600 rounded-xl lg:rounded-2xl shadow-xl p-4 sm:p-6 text-white">
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
        <div class="flex-1">
          <h3 class="text-lg sm:text-xl font-semibold mb-2">🚀 Enhanced Dashboard Features</h3>
          <p class="text-emerald-100 mb-4 text-sm sm:text-base">Experience real-time updates, interactive components, and advanced TailwindCSS animations</p>
          <div class="flex flex-wrap gap-3 sm:gap-4">
            <DarkModeToggle />
            <ToggleSwitch label="Real-time Updates" enabled={true} enabledColor="bg-white text-emerald-600" />
            <ToggleSwitch label="Auto-refresh" enabledColor="bg-emerald-400" />
          </div>
        </div>
        <div class="lg:ml-6">
          <div class="bg-white bg-opacity-20 backdrop-blur-sm rounded-lg p-4 border border-emerald-400/30">
            <div class="text-sm text-emerald-100 mb-1">Live Demo Status</div>
            <div class="flex items-center space-x-2">
              <div class="w-3 h-3 bg-emerald-300 rounded-full animate-pulse shadow-lg"></div>
              <span class="font-semibold text-sm sm:text-base">All Systems Active</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Enhanced Stats Cards - Mobile First -->
  <div class="grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 lg:gap-6 mb-6 lg:mb-8">
    <StatsCard 
      title="Active Services" 
      value="28" 
      color="emerald"
      icon='<svg class="h-5 w-5 sm:h-6 sm:w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01" /></svg>' 
    />
    <StatsCard 
      title="Deployments Today" 
      value="15" 
      color="teal"
      icon='<svg class="h-5 w-5 sm:h-6 sm:w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" /></svg>' 
    />
    <StatsCard 
      title="Critical Alerts" 
      value="2" 
      color="red"
      icon='<svg class="h-5 w-5 sm:h-6 sm:w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>' 
    />
    <StatsCard 
      title="System Uptime" 
      value="99.9%" 
      color="emerald"
      icon='<svg class="h-5 w-5 sm:h-6 sm:w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" /></svg>' 
    />
  </div>

  <!-- Main Dashboard Grid - Responsive Layout -->
  <div class="grid grid-cols-1 xl:grid-cols-4 gap-6 lg:gap-8 mb-8">
    <!-- Left Column - Charts and Main Content -->
    <div class="xl:col-span-3 space-y-6 lg:space-y-8">
      <!-- Enhanced Chart Section - Mobile Stacked -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6">
        <LineChart 
          title="Deployment Frequency" 
          caption="Successful deployments per day over the last 30 days"
        />
        <div class="bg-gradient-to-br from-white to-emerald-50/50 dark:from-gray-800 dark:to-emerald-900/20 rounded-lg shadow-lg p-4 sm:p-6 border border-emerald-100/50 dark:border-emerald-900/20">
          <h3 class="text-base sm:text-lg font-semibold bg-gradient-to-r from-emerald-700 to-teal-700 bg-clip-text text-transparent mb-4">Performance Metrics</h3>
          <div class="space-y-4">
            <!-- CPU Usage -->
            <div>
              <div class="flex justify-between items-center mb-2">
                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">CPU Usage</span>
                <span id="cpu-value" class="text-sm font-semibold text-gray-900 dark:text-gray-100">72%</span>
              </div>
              <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3 relative overflow-hidden">
                <div 
                  id="cpu-bar" 
                  class="bg-gradient-to-r from-emerald-500 to-teal-600 h-3 rounded-full transition-all duration-500 ease-out" 
                  style="width: 72%"
                ></div>
                <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-20 animate-pulse"></div>
              </div>
            </div>
            
            <!-- Memory Usage -->
            <div>
              <div class="flex justify-between items-center mb-2">
                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Memory Usage</span>
                <span id="memory-value" class="text-sm font-semibold text-gray-900 dark:text-gray-100">58%</span>
              </div>
              <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3 relative overflow-hidden">
                <div 
                  id="memory-bar" 
                  class="bg-gradient-to-r from-teal-500 to-emerald-600 h-3 rounded-full transition-all duration-500 ease-out" 
                  style="width: 58%"
                ></div>
                <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-20 animate-pulse"></div>
              </div>
            </div>
            
            <!-- Network I/O -->
            <div>
              <div class="flex justify-between items-center mb-2">
                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Network I/O</span>
                <span id="network-value" class="text-sm font-semibold text-gray-900 dark:text-gray-100">234 MB/s</span>
              </div>
              <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3 relative overflow-hidden">
                <div 
                  id="network-bar" 
                  class="bg-gradient-to-r from-emerald-400 to-teal-500 h-3 rounded-full transition-all duration-500 ease-out" 
                  style="width: 45%"
                ></div>
                <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-20 animate-pulse"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Resource Timeline -->
      <ResourceTimeline />
      
      <!-- Enhanced Deployment Table -->
      <EnhancedDeploymentTable />
    </div>
    
    <!-- Right Sidebar - Mobile Stack -->
    <div class="space-y-4 lg:space-y-6">
      <!-- Alerts Card -->
      <AlertCard />
      
      <!-- Service Status Card -->
      <div class="bg-gradient-to-br from-white to-emerald-50/30 dark:from-gray-800 dark:to-emerald-900/10 rounded-lg shadow-lg p-4 sm:p-6 border border-emerald-100/50 dark:border-emerald-900/20">
        <h3 class="text-base sm:text-lg font-semibold bg-gradient-to-r from-emerald-700 to-teal-700 bg-clip-text text-transparent mb-4">Service Health</h3>
        <div id="service-health" class="space-y-3">
          <!-- Services will be dynamically populated -->
        </div>
      </div>
      
      <!-- Quick Actions Panel -->
      <div class="bg-gradient-to-br from-white to-emerald-50/30 dark:from-gray-800 dark:to-emerald-900/10 rounded-lg shadow-lg p-4 sm:p-6 border border-emerald-100/50 dark:border-emerald-900/20">
        <h3 class="text-base sm:text-lg font-semibold bg-gradient-to-r from-emerald-700 to-teal-700 bg-clip-text text-transparent mb-4">Emergency Actions</h3>
        <div class="space-y-3">
          <button class="w-full flex items-center justify-center px-3 py-2 sm:px-4 sm:py-3 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-lg hover:from-red-600 hover:to-red-700 focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-all duration-200 group shadow-md hover:shadow-lg text-sm sm:text-base">
            <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2 group-hover:animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Emergency Rollback
          </button>
          <button class="w-full flex items-center justify-center px-3 py-2 sm:px-4 sm:py-3 bg-gradient-to-r from-yellow-500 to-yellow-600 text-white rounded-lg hover:from-yellow-600 hover:to-yellow-700 focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 transition-all duration-200 group shadow-md hover:shadow-lg text-sm sm:text-base">
            <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2 group-hover:animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            Maintenance Mode
          </button>
          <button class="w-full flex items-center justify-center px-3 py-2 sm:px-4 sm:py-3 bg-gradient-to-r from-emerald-500 to-teal-600 text-white rounded-lg hover:from-emerald-600 hover:to-teal-700 focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2 transition-all duration-200 group shadow-md hover:shadow-lg text-sm sm:text-base">
            <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2 group-hover:animate-bounce" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Health Check All
          </button>
        </div>
      </div>
      
      <!-- Recent Activity -->
      <div class="bg-gradient-to-br from-white to-emerald-50/30 dark:from-gray-800 dark:to-emerald-900/10 rounded-lg shadow-lg p-4 sm:p-6 border border-emerald-100/50 dark:border-emerald-900/20">
        <h3 class="text-base sm:text-lg font-semibold bg-gradient-to-r from-emerald-700 to-teal-700 bg-clip-text text-transparent mb-4">Recent Activity</h3>
        <div id="recent-activity" class="space-y-3">
          <!-- Activity items will be dynamically populated -->
        </div>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  import { dashboardService } from '../services/dashboardData';

  class EnhancedDashboard {
    constructor() {
      this.init();
      this.startRealTimeUpdates();
      this.setupInteractiveElements();
    }

    init() {
      // Setup quick actions dropdown
      this.setupQuickActionsDropdown();
      
      // Initialize real-time features
      this.updateSystemMetrics();
      this.updateServiceHealth();
      this.updateRecentActivity();
      
      // Setup periodic updates
      setInterval(() => this.updateLastUpdatedTime(), 30000);
    }

    setupQuickActionsDropdown() {
      const button = document.getElementById('quick-actions-btn');
      const menu = document.getElementById('quick-actions-menu');
      
      button?.addEventListener('click', () => {
        const isHidden = menu?.classList.contains('hidden');
        
        if (isHidden) {
          menu?.classList.remove('hidden', 'scale-95', 'opacity-0');
          menu?.classList.add('scale-100', 'opacity-100');
        } else {
          menu?.classList.add('scale-95', 'opacity-0');
          menu?.classList.remove('scale-100', 'opacity-100');
          setTimeout(() => {
            menu?.classList.add('hidden');
          }, 200);
        }
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        const dropdown = document.getElementById('quick-actions-dropdown');
        if (!dropdown?.contains(e.target as Node)) {
          menu?.classList.add('scale-95', 'opacity-0', 'hidden');
          menu?.classList.remove('scale-100', 'opacity-100');
        }
      });
    }

    updateSystemMetrics() {
      const metrics = dashboardService.generateSystemMetrics();
      
              // Update CPU
        const cpuMetric = metrics.find(m => m.name === 'CPU Usage');
        if (cpuMetric) {
          const cpuValue = document.getElementById('cpu-value');
          const cpuBar = document.getElementById('cpu-bar');
          if (cpuValue && cpuBar) {
            cpuValue.textContent = `${cpuMetric.value}%`;
            cpuBar.style.width = `${cpuMetric.value}%`;
            
            // Update color based on value with emerald theme
            if (cpuMetric.value > 80) {
              cpuBar.className = cpuBar.className.replace(/from-\w+-\d+ to-\w+-\d+/, 'from-red-500 to-red-600');
            } else if (cpuMetric.value > 60) {
              cpuBar.className = cpuBar.className.replace(/from-\w+-\d+ to-\w+-\d+/, 'from-yellow-500 to-yellow-600');
            } else {
              cpuBar.className = cpuBar.className.replace(/from-\w+-\d+ to-\w+-\d+/, 'from-emerald-500 to-teal-600');
            }
          }
        }

        // Update Memory
        const memoryMetric = metrics.find(m => m.name === 'Memory Usage');
        if (memoryMetric) {
          const memoryValue = document.getElementById('memory-value');
          const memoryBar = document.getElementById('memory-bar');
          if (memoryValue && memoryBar) {
            memoryValue.textContent = `${memoryMetric.value}%`;
            memoryBar.style.width = `${memoryMetric.value}%`;
          }
        }

        // Update Network
        const networkMetric = metrics.find(m => m.name === 'Network I/O');
        if (networkMetric) {
          const networkValue = document.getElementById('network-value');
          const networkBar = document.getElementById('network-bar');
          if (networkValue && networkBar) {
            networkValue.textContent = `${networkMetric.value} ${networkMetric.unit}`;
            const percentage = Math.min((networkMetric.value / 1000) * 100, 100);
            networkBar.style.width = `${percentage}%`;
          }
        }
    }

    updateServiceHealth() {
      const services = dashboardService.generateServiceStatuses();
      const container = document.getElementById('service-health');
      
      if (container) {
        container.innerHTML = services.slice(0, 6).map(service => {
          const statusColors = {
            online: 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200',
            offline: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',
            degraded: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
          };
          
          const statusDots = {
            online: 'bg-gradient-to-r from-emerald-400 to-teal-500',
            offline: 'bg-gradient-to-r from-red-400 to-red-500',
            degraded: 'bg-gradient-to-r from-yellow-400 to-yellow-500'
          };
          
          return `
            <div class="flex items-center justify-between p-3 rounded-lg border border-emerald-200/50 dark:border-emerald-700/30 hover:bg-gradient-to-r hover:from-emerald-50/50 hover:to-teal-50/50 dark:hover:from-emerald-900/10 dark:hover:to-teal-900/10 transition-all duration-200 group">
              <div class="flex items-center space-x-3">
                <div class="w-2 h-2 rounded-full ${statusDots[service.status]} animate-pulse shadow-sm"></div>
                <span class="text-sm font-medium text-gray-900 dark:text-gray-100 group-hover:text-emerald-700 dark:group-hover:text-emerald-300 transition-colors duration-200">${service.name}</span>
              </div>
              <span class="px-2 py-1 text-xs font-medium rounded-full ${statusColors[service.status]} shadow-sm">
                ${service.status}
              </span>
            </div>
          `;
        }).join('');
      }
    }

    updateRecentActivity() {
      const activities = [
        { type: 'deployment', message: 'api-gateway deployed to production', time: '2 min ago', icon: '🚀' },
        { type: 'alert', message: 'High memory usage detected', time: '5 min ago', icon: '⚠️' },
        { type: 'security', message: 'Security scan completed', time: '8 min ago', icon: '🔒' },
        { type: 'system', message: 'Database backup completed', time: '12 min ago', icon: '💾' },
        { type: 'deployment', message: 'user-service rollback completed', time: '18 min ago', icon: '↩️' }
      ];
      
      const container = document.getElementById('recent-activity');
      if (container) {
        container.innerHTML = activities.map(activity => `
          <div class="flex items-start space-x-3 p-3 rounded-lg hover:bg-gradient-to-r hover:from-emerald-50/50 hover:to-teal-50/50 dark:hover:from-emerald-900/10 dark:hover:to-teal-900/10 transition-colors duration-200 group border border-emerald-200/30 dark:border-emerald-700/20">
            <span class="text-lg filter drop-shadow-sm">${activity.icon}</span>
            <div class="flex-1 min-w-0">
              <p class="text-sm text-gray-900 dark:text-gray-100 group-hover:text-emerald-700 dark:group-hover:text-emerald-300 transition-colors duration-200">${activity.message}</p>
              <p class="text-xs text-gray-500 dark:text-gray-400 group-hover:text-emerald-600 dark:group-hover:text-emerald-400 transition-colors duration-200">${activity.time}</p>
            </div>
          </div>
        `).join('');
      }
    }

    updateLastUpdatedTime() {
      const lastUpdate = document.getElementById('last-update');
      if (lastUpdate) {
        lastUpdate.textContent = `Last updated: ${new Date().toLocaleTimeString()}`;
      }
    }

    startRealTimeUpdates() {
      // Update metrics every 5 seconds
      setInterval(() => {
        this.updateSystemMetrics();
      }, 5000);

      // Update service health every 10 seconds
      setInterval(() => {
        this.updateServiceHealth();
      }, 10000);

      // Update recent activity every 30 seconds
      setInterval(() => {
        this.updateRecentActivity();
      }, 30000);
    }

    setupInteractiveElements() {
      // Add hover effects to stats cards
      document.querySelectorAll('[class*="hover:scale-105"]').forEach(card => {
        card.addEventListener('mouseenter', () => {
          card.classList.add('shadow-xl');
        });
        card.addEventListener('mouseleave', () => {
          card.classList.remove('shadow-xl');
        });
      });

      // Emergency action confirmations
      document.querySelectorAll('button[class*="from-red-500"]').forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          if (confirm('Are you sure you want to perform this emergency action?')) {
            this.showToast('Emergency action initiated!', 'warning');
          }
        });
      });
    }

    showToast(message: string, type: 'success' | 'warning' | 'error' = 'success') {
      const colors = {
        success: 'from-emerald-500 to-teal-600',
        warning: 'from-yellow-500 to-yellow-600',
        error: 'from-red-500 to-red-600'
      };

      const toast = document.createElement('div');
      toast.className = `fixed bottom-4 right-4 bg-gradient-to-r ${colors[type]} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform translate-y-full transition-transform duration-300`;
      toast.textContent = message;
      
      document.body.appendChild(toast);
      
      setTimeout(() => {
        toast.classList.remove('translate-y-full');
      }, 100);
      
      setTimeout(() => {
        toast.classList.add('translate-y-full');
        setTimeout(() => {
          document.body.removeChild(toast);
        }, 300);
      }, 4000);
    }
  }

  // Initialize enhanced dashboard
  document.addEventListener('DOMContentLoaded', () => {
    new EnhancedDashboard();
    
    // Start real-time data service
    dashboardService.startRealTimeUpdates();
  });
</script>

<style>
  /* Enhanced mobile-first animations and effects */
  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }
  
  .shimmer::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(16, 185, 129, 0.4), transparent);
    animation: shimmer 2s infinite;
  }
  
  /* Emerald pulse animation for status indicators */
  .status-pulse {
    animation: emeraldPulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  @keyframes emeraldPulse {
    0%, 100% { 
      box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7);
    }
    50% { 
      box-shadow: 0 0 0 10px rgba(16, 185, 129, 0);
    }
  }
  
  /* Gradient text effect */
  .gradient-text {
    background: linear-gradient(45deg, #059669, #0d9488, #10b981);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  /* Enhanced emerald shadow effects */
  .shadow-glow {
    box-shadow: 0 0 20px rgba(16, 185, 129, 0.3);
  }
  
  /* Smooth transitions for all interactive elements */
  * {
    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 200ms;
  }

  /* Mobile touch improvements */
  @media (max-width: 768px) {
    button, a {
      min-height: 44px; /* iOS recommended touch target */
      min-width: 44px;
    }
    
    .touch-target {
      padding: 12px;
    }
  }

  /* Custom scrollbar with emerald theme */
  ::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  
  ::-webkit-scrollbar-track {
    background: transparent;
  }
  
  ::-webkit-scrollbar-thumb {
    background: linear-gradient(to bottom, #10b981, #0d9488);
    border-radius: 3px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(to bottom, #059669, #0f766e);
  }
</style>
