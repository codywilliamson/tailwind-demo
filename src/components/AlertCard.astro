---
// Sample alerts data
const alerts = [
  {
    id: "alert-001",
    title: "High CPU Usage",
    description: "api-gateway service is experiencing high CPU load (92%)",
    type: "warning",
    timestamp: "2025-04-11T08:45:00Z"
  },
  {
    id: "alert-002",
    title: "Memory Leak Detected",
    description: "Possible memory leak detected in payment-service",
    type: "error",
    timestamp: "2025-04-11T07:30:00Z"
  },
  {
    id: "alert-003",
    title: "Auto-scaling Event",
    description: "user-service scaled up to 5 instances",
    type: "info",
    timestamp: "2025-04-11T06:15:00Z"
  }
];

// Function to get time elapsed
function getTimeElapsed(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const diff = Math.floor((now - date) / 1000 / 60); // minutes
  
  if (diff < 60) {
    return `${diff} min ago`;
  } else if (diff < 1440) {
    return `${Math.floor(diff / 60)} hours ago`;
  } else {
    return `${Math.floor(diff / 1440)} days ago`;
  }
}

// Alert type styling
function getAlertStyle(type) {
  const styles = {
    info: {
      bg: "bg-blue-50",
      border: "border-blue-200",
      icon: "bg-blue-400",
      text: "text-blue-800"
    },
    warning: {
      bg: "bg-yellow-50",
      border: "border-yellow-200",
      icon: "bg-yellow-400",
      text: "text-yellow-800"
    },
    error: {
      bg: "bg-red-50",
      border: "border-red-200",
      icon: "bg-red-400",
      text: "text-red-800"
    },
    success: {
      bg: "bg-green-50",
      border: "border-green-200",
      icon: "bg-green-400",
      text: "text-green-800"
    }
  };
  
  return styles[type] || styles.info;
}

// Icons for different alert types
function getAlertIcon(type) {
  const icons = {
    info: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
    </svg>`,
    warning: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
    </svg>`,
    error: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
    </svg>`,
    success: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
    </svg>`
  };
  
  return icons[type] || icons.info;
}
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
  <div class="flex justify-between items-center mb-6">
    <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-100">System Alerts</h3>
    <a href="#" class="text-sm text-blue-600 hover:text-blue-800">View all</a>
  </div>
  
  <div class="space-y-4">
    {alerts.map((alert) => {
      const style = getAlertStyle(alert.type);
      return (
        <div class={`p-4 rounded-lg border ${style.bg} ${style.border} flex items-start`}>
          <div class={`rounded-full ${style.icon} p-2 mr-3 flex-shrink-0`}>
            <Fragment set:html={getAlertIcon(alert.type)} />
          </div>
          <div class="flex-1">
            <div class="flex justify-between">
              <h4 class={`font-medium ${style.text}`}>{alert.title}</h4>
              <span class="text-xs text-gray-500">{getTimeElapsed(alert.timestamp)}</span>
            </div>
            <p class="text-sm text-gray-600 mt-1">{alert.description}</p>
          </div>
        </div>
      );
    })}
  </div>
</div>