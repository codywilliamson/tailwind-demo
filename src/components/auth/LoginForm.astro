---
import Button from '../ui/Button.astro';
import Input from '../forms/Input.astro';
import Card from '../ui/Card.astro';

export interface Props {
  title?: string;
  subtitle?: string;
  showRememberMe?: boolean;
  showForgotPassword?: boolean;
  showSignUpLink?: boolean;
  redirectTo?: string;
  class?: string;
}

const { 
  title = "Welcome back",
  subtitle = "Sign in to your account",
  showRememberMe = true,
  showForgotPassword = true,
  showSignUpLink = true,
  redirectTo = "/dashboard",
  class: className = ''
} = Astro.props;
---

<Card variant="gradient" class={`w-full max-w-md ${className}`}>
  <div class="text-center mb-6">
    <h2 class="text-2xl font-bold text-gradient">{title}</h2>
    {subtitle && (
      <p class="text-gray-600 dark:text-gray-400 mt-2">{subtitle}</p>
    )}
  </div>

  <form id="login-form" class="space-y-4">
    <Input
      type="email"
      name="email"
      label="Email address"
      placeholder="Enter your email"
      required
      autocomplete="email"
    />

    <Input
      type="password"
      name="password"
      label="Password"
      placeholder="Enter your password"
      required
      autocomplete="current-password"
    />

    {showRememberMe && (
      <div class="flex items-center">
        <input
          id="remember-me"
          name="remember-me"
          type="checkbox"
          class="h-4 w-4 text-emerald-600 focus:ring-emerald-500 border-gray-300 rounded"
        />
        <label for="remember-me" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
          Remember me
        </label>
      </div>
    )}

    <Button
      type="submit"
      variant="primary"
      size="lg"
      fullWidth
      id="login-button"
    >
      Sign in
    </Button>

    <div class="text-center space-y-2">
      {showForgotPassword && (
        <p>
          <a href="/auth/forgot-password" class="text-sm text-emerald-600 dark:text-emerald-400 hover:text-emerald-700 dark:hover:text-emerald-300 hover:underline">
            Forgot your password?
          </a>
        </p>
      )}

      {showSignUpLink && (
        <p class="text-sm text-gray-600 dark:text-gray-400">
          Don't have an account?
          <a href="/auth/register" class="font-medium text-emerald-600 dark:text-emerald-400 hover:text-emerald-700 dark:hover:text-emerald-300 hover:underline ml-1">
            Sign up
          </a>
        </p>
      )}
    </div>
  </form>

  <!-- Error message container -->
  <div id="error-message" class="hidden mt-4 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
    <p class="text-sm text-red-600 dark:text-red-400" id="error-text"></p>
  </div>

  <!-- Success message container -->
  <div id="success-message" class="hidden mt-4 p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
    <p class="text-sm text-green-600 dark:text-green-400" id="success-text"></p>
  </div>
</Card>

<script define:vars={{ redirectTo }}>
  class LoginForm {
    constructor() {
      this.form = document.getElementById('login-form');
      this.button = document.getElementById('login-button');
      this.errorContainer = document.getElementById('error-message');
      this.errorText = document.getElementById('error-text');
      this.successContainer = document.getElementById('success-message');
      this.successText = document.getElementById('success-text');
      
      this.init();
    }

    init() {
      if (this.form) {
        this.form.addEventListener('submit', (e) => this.handleSubmit(e));
      }
    }

    async handleSubmit(e) {
      e.preventDefault();
      
      this.hideMessages();
      this.setLoading(true);

      const formData = new FormData(this.form);
      const email = formData.get('email');
      const password = formData.get('password');
      const rememberMe = formData.get('remember-me') === 'on';

      try {
        // Simulated API call - replace with your actual authentication logic
        const response = await this.authenticateUser({ email, password, rememberMe });
        
        if (response.success) {
          this.showSuccess('Login successful! Redirecting...');
          
          // Store auth token if provided
          if (response.token) {
            localStorage.setItem('authToken', response.token);
          }
          
          // Redirect after short delay
          setTimeout(() => {
            window.location.href = redirectTo;
          }, 1500);
        } else {
          this.showError(response.message || 'Login failed. Please try again.');
        }
      } catch (error) {
        this.showError('An error occurred. Please try again.');
        console.error('Login error:', error);
      } finally {
        this.setLoading(false);
      }
    }

    // Simulated authentication - replace with your actual API
    async authenticateUser({ email, password, rememberMe }) {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Simulate authentication logic
      if (email === 'demo@example.com' && password === 'demo123') {
        return {
          success: true,
          token: 'demo-jwt-token',
          user: { email, name: 'Demo User' }
        };
      } else {
        return {
          success: false,
          message: 'Invalid email or password'
        };
      }
    }

    setLoading(loading) {
      if (this.button) {
        this.button.disabled = loading;
        this.button.innerHTML = loading 
          ? '<svg class="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Signing in...'
          : 'Sign in';
      }
    }

    showError(message) {
      if (this.errorText && this.errorContainer) {
        this.errorText.textContent = message;
        this.errorContainer.classList.remove('hidden');
      }
    }

    showSuccess(message) {
      if (this.successText && this.successContainer) {
        this.successText.textContent = message;
        this.successContainer.classList.remove('hidden');
      }
    }

    hideMessages() {
      if (this.errorContainer) this.errorContainer.classList.add('hidden');
      if (this.successContainer) this.successContainer.classList.add('hidden');
    }
  }

  // Initialize login form
  document.addEventListener('DOMContentLoaded', () => {
    new LoginForm();
  });
</script>